name: Azure Pipelines
variables:
#  python.version: '3.7.6'
- group: project3_variables
stages:
- stage: TerraformIaCCI
  displayName: TerraformIaC - CI
  pool:
    vmImage: 'ubuntu-latest'
  jobs:
  - job: TerraformIaCCIJob
    displayName: TerraformIaCCI - CI Job
    steps:
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'KNOWN_HOSTS_STRING'
        sshPublicKey: $(terraform-ssh-pub)
        sshKeySecureFile: 'id_rsa'
    - task: Bash@3
      displayName: Copy ssh rsa pub file for vm.tf
      inputs:
        targetType: 'inline'
        script: cp $(System.DefaultWorkingDirectory)/id_rsa.pub ~/.ssh
    # Step 1: Install Terraform
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: 'Install Terraform 0.15.3'
      inputs:
        terraformVersion: 0.15.3
    # Step 2: Initialise workspace using terraform init
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform init'
      inputs:
        command: init
        workingDirectory: 'ProjectStarterResources/terraform'
        backendType: azurerm
        backendServiceArm: 'Azure subscription 1 (753e1116-a934-4cde-98ac-9c70e98003fa)'
        backendAzureRmResourceGroupName: tfstate
        backendAzureRmStorageAccountName: tfstate9935
        backendAzureRmContainerName: qualrel
        backendAzureRmKey: terraform.qualrel
    # Step 3. Validate HCL syntaxt using terraform validate
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform validate'    
      inputs:
        command: validate
        workingDirectory: 'ProjectStarterResources/terraform'
    # Step 4. Run the terraform plan
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform plan'
      inputs:
        command: plan
        workingDirectory: 'ProjectStarterResources/terraform'
        environmentServiceName: 'Azure subscription 1 (753e1116-a934-4cde-98ac-9c70e98003fa)'
        commandOptions: -out project3cicd
    # Step 5. Run the terraform apply
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform apply'
      inputs:
        provider: 'azurerm'
        command: apply
        workingDirectory: 'ProjectStarterResources/terraform'
        environmentServiceName: 'Azure subscription 1 (753e1116-a934-4cde-98ac-9c70e98003fa)'
        commandOptions: project3cicd
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/ProjectStarterResources/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
        replaceExistingArchive: true
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
- stage:
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'Azure subscription 1 (753e1116-a934-4cde-98ac-9c70e98003fa)'
              appName: 'project3Application-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - deployment: VMDeploy
    displayName: Deployment of Azure VM
    environment:
      name:  TEST
      resourceType: VirtualMachine
  #     tags: TAG NAME
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                export PATH=$PATH:/Users/simonkearn/Documents/Nanodegree
#          - task: Bash@3
#            displayName: Run Selenium Tests
#            inputs:
#              targetType: 'inline'
#              script:
#                python3 ProjectStarterResources/automatedtesting/selenium/login.py > seleniumtestrun.log
- stage:
  jobs:
  - job: RunThroughPostmanTests
    steps:
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: |
          sudo npm install -g newman
          sudo npm install -g newman-reporter-junitfull
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: CmdLine@2
      displayName: Run Regression Test Suite
      continueOnError: true
      inputs:
        script: 'newman run ProjectStarterResources/automatedtesting/postman/postman_regress_activities.postman_collection.json -e ProjectStarterResources/automatedtesting/postman/PostmanTest.postman_environment.json --reporters cli,junitfull --reporter-junitfull-export TestResults/result-regression-test.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: CmdLine@2
      displayName: Run Data Validation Test Suite
      inputs:
        script: 'newman run ProjectStarterResources/automatedtesting/postman/postman_dv_activities.postman_collection.json -e ProjectStarterResources/automatedtesting/postman/PostmanTest.postman_environment.json --reporters cli,junitfull --reporter-junitfull-export TestResults/result-data-validation-test.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: PublishTestResults@2
      displayName: Publish Postman Test Results
      inputs:
        testResultsFiles: '**/*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/TestResults'
#  - job: JmeterTestRun
#    displayName: Jmeter Test Section
#      steps:
#      - task: Bash@3
#        displayName: Run Jmeter tests
#        inputs:
#          targetType: 'inline'
#          script: |
#            /Users/simonkearn/Documents/Nanodegree/apache-jmeter-5.4.1/bin/jmeter -n -t $(System.DefaultWorkingDirectory)/ProjectStarterResources/automatedtesting/jmeter/Starter.jmx
