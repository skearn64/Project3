name: Azure Pipelines
variables:
#  python.version: '3.7.6'
- group: project3_variables
stages:
- stage: TerraformIaCCI
  displayName: TerraformIaC - CI
  pool:
    vmImage: 'ubuntu-latest'
  jobs:
  - job: TerraformIaCCIJob
    displayName: TerraformIaCCI - CI Job
    steps:
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'KNOWN_HOSTS_STRING'
        sshPublicKey: $(terraform-ssh-pub)
        sshKeySecureFile: 'id_rsa'
    - task: Bash@3
      displayName: Copy ssh rsa pub file for vm.tf
      inputs:
        targetType: 'inline'
        script: cp $(System.DefaultWorkingDirectory)/id_rsa.pub ~/.ssh
    # Step 1: Install Terraform
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: 'Install Terraform 0.15.3'
      inputs:
        terraformVersion: 0.15.3
    # Step 2: Initialise workspace using terraform init
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform init'
      inputs:
        command: init
        workingDirectory: 'ProjectStarterResources/terraform'
        backendType: azurerm
        backendServiceArm: 'Azure subscription 1 (753e1116-a934-4cde-98ac-9c70e98003fa)'
        backendAzureRmResourceGroupName: tfstate
        backendAzureRmStorageAccountName: tfstate9935
        backendAzureRmContainerName: qualrel
        backendAzureRmKey: terraform.qualrel
    # Step 3. Validate HCL syntaxt using terraform validate
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform validate'    
      inputs:
        command: validate
        workingDirectory: 'ProjectStarterResources/terraform'
    # Step 4. Run the terraform plan
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform plan'
      inputs:
        command: plan
        workingDirectory: 'ProjectStarterResources/terraform'
        environmentServiceName: 'Azure subscription 1 (753e1116-a934-4cde-98ac-9c70e98003fa)'
        commandOptions: -out project3cicd
    # Step 5. Run the terraform apply
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform apply'
      inputs:
        provider: 'azurerm'
        command: apply
        workingDirectory: 'ProjectStarterResources/terraform'
        environmentServiceName: 'Azure subscription 1 (753e1116-a934-4cde-98ac-9c70e98003fa)'
        commandOptions: project3cicd
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Bash@3
      displayName: Copy selenium file for publishing
      inputs:
        targetType: 'inline'
        script: cp $(System.DefaultWorkingDirectory)/ProjectStarterResources/automatedtesting/selenium/login.py $(Build.ArtifactStagingDirectory)
    - publish: $(Build.ArtifactStagingDirectory)
      displayName: 'Upload Selenium File'
      artifact: selenium
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/ProjectStarterResources/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
        replaceExistingArchive: true
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
- stage: Deployment
  displayName: Deployment of VM and Web App
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'Azure subscription 1 (753e1116-a934-4cde-98ac-9c70e98003fa)'
              appName: 'project3Application-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - deployment: VMDeploy
    displayName: Deployment of Azure VM
    environment:
      name:  TEST
      resourceType: VirtualMachine
  #     tags: TAG NAME
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: Download selenium
            artifact: selenium
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
          - task: Bash@3
            displayName: Install and setup Chromedriver
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                # Remove previous chromedriver zip file
                rm chromedriver_linux64.zip
                
                # Get the version of Chromedriver selenium tests are written for
                wget https://chromedriver.storage.googleapis.com/96.0.4664.45/chromedriver_linux64.zip
                unzip chromedriver_linux64.zip
                sudo mv chromedriver /usr/bin/chromedriver
                sudo chown root:root /usr/bin/chromedriver
                sudo chmod +x /usr/bin/chromedriver
                sudo -H pip3 install -U selenium
                echo $PWD
                echo $PATH
                chromedriver -v
                # pip install --upgrade pip
          - task: Bash@3
            displayName: Run Selenium Tests
            inputs:
              targetType: 'inline'
              script:
                python3 /home/skadmin/azagent/_work/1/selenium/login.py > /home/skadmin/azagent/_work/1/TestResults/seleniumtestrun.log
                cat /home/skadmin/azagent/_work/1/TestResults/seleniumtestrun.log
- stage: Run_Tests
  displayName: Run App Tests
  jobs:
  - job: RunThroughPostmanTests
    steps:
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: |
          sudo npm install -g newman
          sudo npm install -g newman-reporter-junitfull
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: CmdLine@2
      displayName: Run Regression Test Suite
      continueOnError: true
      inputs:
        script: 'newman run ProjectStarterResources/automatedtesting/postman/postman_regress_activities.postman_collection.json -e ProjectStarterResources/automatedtesting/postman/PostmanTest.postman_environment.json --reporters cli,junit --reporter-junit-export TestResults/result-regression-test.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: CmdLine@2
      displayName: Run Data Validation Test Suite
      inputs:
        script: 'newman run ProjectStarterResources/automatedtesting/postman/postman_dv_activities.postman_collection.json -e ProjectStarterResources/automatedtesting/postman/PostmanTest.postman_environment.json --reporters cli,junit --reporter-junit-export TestResults/result-data-validation-test.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: PublishTestResults@2
      displayName: Publish Postman Test Results
      inputs:
        testResultsFiles: '**/*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/TestResults'
  - job: JmeterTestRun
    displayName: Jmeter Test Section
    steps:
      - task: Bash@3
        displayName: Get JMeter and Install
        inputs:
          targetType: 'inline'
          script: |
            #! /bin/bash
            
            # Remove previous jmeter zip/tgz file
            rm apache-jmeter-5.4.1.tgz
            # rm apache-jmeter-5.4.1.zip
            echo $PWD
            
            wget https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.4.1.tgz
            tar -xvf apache-jmeter-5.4.1.tgz
            # wget https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.4.1.zip
            # unzip apache-jmeter-5.4.1.zip
      - task: Bash@3
        displayName: Run Jmeter tests
        inputs:
          targetType: 'inline'
          script: |
            apache-jmeter-5.4.1/bin/jmeter -n -t $(System.DefaultWorkingDirectory)/ProjectStarterResources/automatedtesting/jmeter/StressTest.jmx \
              -l $(System.DefaultWorkingDirectory)/ProjectStarterResources/automatedtesting/reports/jmeter/stress_test_results.csv \
              -e -f -o $(System.DefaultWorkingDirectory)/ProjectStarterResources/automatedtesting/reports/jmeter/stress_test_dash_html-report \
              -j $(System.DefaultWorkingDirectory)/ProjectStarterResources/automatedtesting/reports/jmeter/stress_test.log

            apache-jmeter-5.4.1/bin/jmeter -n -t $(System.DefaultWorkingDirectory)/ProjectStarterResources/automatedtesting/jmeter/EnduranceTest.jmx \
              -l $(System.DefaultWorkingDirectory)/ProjectStarterResources/automatedtesting/reports/jmeter/endurance_test_results.csv \
              -e -f -o $(System.DefaultWorkingDirectory)/ProjectStarterResources/automatedtesting/reports/jmeter/endurance_test_dash_html-report \
              -j $(System.DefaultWorkingDirectory)/ProjectStarterResources/automatedtesting/reports/jmeter/endurance_test.log
